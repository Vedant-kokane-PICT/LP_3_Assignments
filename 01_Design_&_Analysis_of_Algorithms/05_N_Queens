#include<bits/stdc++.h>
using namespace std;

bool isSafe(int row, int col, vector<string> &board) {
    // same row
    for(int i=0;i<col;i++){
        if(board[row][i] == 'Q'){
            return false;
        }
    }

    // We should check for only left side as right side will be generated in the future

    // upper diagonal elements
    for(int i=row-1,j=col-1;i>=0 && j>=0 ;i--,j--){
        if(board[i][j] == 'Q'){
            return false;
        }
    }

    // lower diagonal elements
    for(int i=row+1,j=col-1;i<board.size() && j>=0; i++,j--){
        if(board[i][j] == 'Q'){
            return false;
        }
    }

    return true;
}

void helper(int col, vector<string> &board) {
    if (col == size) {
        ans.push_back(board);
        return;
    }

    for (int row = 0; row < board.size(); row++) {
        if (isSafe(row, col, board)) {
            board[row][col] = 'Q';
            helper(col + 1, board);
            board[row][col] = '.';
        }
    }
}

vector<vector<string>> solveNQueens(int n) {
    size = n;
    vector<string> board(size);
    string s(size,'.');
    for(int i=0;i<size;i++){
        board[i] = s;
    }
    helper2(0,board);
    return ans;
}
